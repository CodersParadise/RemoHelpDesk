<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MarrySocket</name>
    </assembly>
    <members>
        <member name="T:MarrySocket.MBase.BaseSocket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MBase.BaseSocket.#ctor(System.Net.Sockets.Socket,MarrySocket.MExtra.Logging.Logger,MarrySocket.MExtra.Serialization.ISerialization)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MBase.BaseSocket.SendObject(System.Int32,System.Object)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MBase.BaseSocket.Disconnect">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MBase.BaseSocket.Error(System.String)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MBase.BaseSocket.InTraffic">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MBase.BaseSocket.OutTraffic">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MBase.BaseConfig">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="F:MarrySocket.MBase.BaseConfig.USE_IPV6_ONLY">
             <summary>
            https://msdn.microsoft.com/en-us/library/system.net.sockets.socketoptionname.aspx
             IPv6Only	
             Indicates if a socket created for the AF_INET6 address family is restricted to IPv6 communications only.
             Sockets created for the AF_INET6 address family may be used for both IPv6 and IPv4 communications.
             Some applications may want to restrict their use of a socket created for the AF_INET6 address family to IPv6 communications only.
             When this value is non-zero (the default on Windows), a socket created for the AF_INET6 address family can be used to send and receive IPv6 packets only.
             When this value is zero, a socket created for the AF_INET6 address family can be used to send and receive packets to and from an IPv6 address or an IPv4 address.
             Note that the ability to interact with an IPv4 address requires the use of IPv4 mapped addresses.
             This socket option is supported on Windows Vista or later.
             </summary>
        </member>
        <member name="M:MarrySocket.MBase.BaseConfig.#ctor(MarrySocket.MExtra.Serialization.ISerialization)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MBase.BaseConfig.Serializer">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MBase.BaseConfig.ServerIP">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MBase.BaseConfig.ServerPort">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MBase.BaseConfig.PollTimeout">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MBase.BaseConfig.BufferSize">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MClient.ConnectedEventArgs">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MClient.ConnectedEventArgs.#ctor(MarrySocket.MClient.ServerSocket)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MClient.ConnectedEventArgs.ServerSocket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MClient.DisconnectedEventArgs">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MClient.DisconnectedEventArgs.#ctor(MarrySocket.MClient.ServerSocket)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MClient.DisconnectedEventArgs.ServerSocket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MClient.ReceivedPacketEventArgs">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MClient.ReceivedPacketEventArgs.#ctor(System.Int32,MarrySocket.MClient.ServerSocket,System.Object)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MClient.ReceivedPacketEventArgs.PacketId">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MClient.ReceivedPacketEventArgs.ServerSocket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MClient.ReceivedPacketEventArgs.MyObject">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Logging.LogWriteEventArgs">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.LogWriteEventArgs.#ctor(MarrySocket.MExtra.Logging.Log)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Logging.LogWriteEventArgs.Log">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Packet.CraftPacket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Packet.PacketCrafter">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Packet.PacketBase">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="F:MarrySocket.MExtra.Packet.PacketBase.memoryBuffer">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketBase.#ctor">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.PacketBase.Buffer">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.PacketBase.BufferPosition">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.PacketBase.BufferSize">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.#ctor">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addbyte(System.Byte)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addbyte(System.Int16)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addbyte(System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addbyte(System.UInt32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addbytes(System.Byte[])">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addfloat(System.Double)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addfloat(System.Single)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addint16(System.Int16)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addint16(System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addint16(System.Int64)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addint16(System.UInt32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addint32(System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addint32(System.Int64)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addint32(System.UInt32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addint64(System.Int64)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketCrafter.Addstring(System.String)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.PacketCrafter.Buffer">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.CraftPacket.#ctor(System.Int32,System.Type,System.Byte[])">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Packet.PacketHeader">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="F:MarrySocket.MExtra.Packet.PacketHeader.HEADER_SIZE">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Packet.PacketHeader.HEADER_PACKET_LENGTH">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Packet.PacketHeader.HEADER_ID_LENGTH">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Packet.PacketHeader.HEADER_TYPE_LENGTH">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Packet.PacketHeader.HEADER_SERIALIZED_CLASS_LENGTH">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketHeader.CreateInstance(System.Byte[])">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketHeader.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.PacketHeader.PacketId">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.PacketHeader.PacketSize">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.PacketHeader.TypeNameSize">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.PacketHeader.SerializedClassSize">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.PacketHeader.DataSize">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="T:MarrySocket.MExtra.Packet.PacketReader">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketReader.#ctor(System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketReader.Readbool">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketReader.Readbyte">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketReader.Readfloat">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketReader.Readint16">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketReader.Readint32">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketReader.Readint64">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketReader.Readstring(System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.PacketReader.ReadZeroString">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.PacketReader.Buffer">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Serialization.BinaryFormatterSerializer">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Serialization.ISerialization">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Serialization.ISerialization.Serialize(System.Object,MarrySocket.MExtra.Logging.Logger)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Serialization.ISerialization.Deserialize(System.Byte[],MarrySocket.MExtra.Logging.Logger)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Serialization.BinaryFormatterSerializer.Serialize(System.Object,MarrySocket.MExtra.Logging.Logger)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Serialization.BinaryFormatterSerializer.Deserialize(System.Byte[],MarrySocket.MExtra.Logging.Logger)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Maid">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.Random">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Maid.IPAddressLookup(System.String)">
            <summary>
            Returns IP Address for given hostname.
            If Supported, returns IPv6 IP, 
            if no IPv6 IP was found or IPv6 is not Supported,
            it will try to return a IPv4 IP address.
            </summary>
            <param name="hostname">Name of host.</param>
            <returns>
            Returns <see cref="T:System.Net.IPAddress"/> on success,
            nuöö on failure
            </returns>
        </member>
        <member name="M:MarrySocket.MExtra.Maid.IPAddressLookup(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Returns IP Address for given hostname.
            Tries to return the IP of specified IP version,
            if a IPv6 IP can not be retrived,
            it will be tried to return a IPv4 IP.
            </summary>
            <param name="hostname">Name of host.</param>
            <param name="addressFamily">Specific IP version.</param>
            <returns>
            Returns <see cref="T:System.Net.IPAddress"/> on success,
            null on failure.
            </returns>
        </member>
        <member name="M:MarrySocket.MExtra.Maid.GetOperatingSystemVersion">
            <summary>
            Returns version of OS.
            </summary>
            <returns>
            Returns <see cref="T:MarrySocket.MExtra.Maid.OsVersion"/>.
            </returns>
            <remarks>
            In order to detect cetain windows versions,
            it is necessary to add a custom .manifest file to the project.
            https://msdn.microsoft.com/en-us/library/windows/desktop/dn481241%28v=vs.85%29.aspx
            Otherwise win 8.1 will be reconized as win 8.0 for example.
            </remarks>
        </member>
        <member name="M:MarrySocket.MExtra.Maid.IPv6Support">
            <summary>
            Tries to determine wether IPv6 may be supported.
            </summary>
            <returns>
            Returns <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:MarrySocket.MExtra.Maid.GetBytes(System.String)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Maid.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Maid.GetString(System.Byte[])">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Maid.OsVersion">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.UNKNOWN">
            <summary>UNKNOWN</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_3_1">
            <summary>WIN_3_1</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_95">
            <summary>WIN_95</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_98">
            <summary>WIN_98</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_ME">
            <summary>WIN_ME</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_NT_3_5">
            <summary>WIN_NT_3_5</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_NT_4">
            <summary>WIN_NT_4</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_2000">
            <summary>WIN_2000</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_XP">
            <summary>WIN_XP</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_2003">
            <summary>WIN_2003</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_VISTA">
            <summary>WIN_VISTA</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_2008">
            <summary>WIN_2008</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_7">
            <summary>WIN_7</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_2008_R2">
            <summary>WIN_2008_R2</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_8">
            <summary>WIN_8</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_8_1">
            <summary>WIN_8_1</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_10">
            <summary>WIN_10</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.WIN_CE">
            <summary>WIN_CE</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.UNIX">
            <summary>UNIX</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.XBOX">
            <summary>XBOX</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Maid.OsVersion.MAX_OSX">
            <summary>MAX_OSX</summary>
        </member>
        <member name="T:MarrySocket.MClient.ClientConfig">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MClient.ClientConfig.#ctor(MarrySocket.MExtra.Serialization.ISerialization)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MClient.ClientConfig.#ctor">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MClient.MarryClient">
            <summary>
            Managed client, for making connections.
            </summary>
        </member>
        <member name="M:MarrySocket.MClient.MarryClient.#ctor(MarrySocket.MClient.ClientConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:MarrySocket.MClient.MarryClient"/> class.
            </summary>
            <param name="clientConfig">Configuration for the client.</param>
        </member>
        <member name="M:MarrySocket.MClient.MarryClient.Connect">
            <summary>
            Connect to server.
            </summary>
        </member>
        <member name="M:MarrySocket.MClient.MarryClient.Disconnect">
            <summary>
            Close connection.
            </summary>
        </member>
        <member name="P:MarrySocket.MClient.MarryClient.ServerSocket">
            <summary>
            Socket to send packets.
            </summary>
        </member>
        <member name="P:MarrySocket.MClient.MarryClient.ClientConfig">
            <summary>
            Configuration of the client.
            </summary>
        </member>
        <member name="P:MarrySocket.MClient.MarryClient.Logger">
            <summary>
            Logging of client events.
            </summary>
        </member>
        <member name="P:MarrySocket.MClient.MarryClient.IsConnected">
            <summary>
            Connection status.
            </summary>
        </member>
        <member name="E:MarrySocket.MClient.MarryClient.Connected">
            <summary>
            Connection established.
            </summary>
        </member>
        <member name="E:MarrySocket.MClient.MarryClient.ReceivedPacket">
            <summary>
            Packet arrived.
            </summary>
        </member>
        <member name="E:MarrySocket.MClient.MarryClient.Disconnected">
            <summary>
            Connection lost.
            </summary>
        </member>
        <member name="T:MarrySocket.MClient.ServerSocket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MClient.ServerSocket.#ctor(System.Net.Sockets.Socket,MarrySocket.MExtra.Logging.Logger,MarrySocket.MExtra.Serialization.ISerialization)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MClient.ServerSocket.Error(System.String)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.ClientList">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.ClientList.#ctor">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.ClientList.GetAllClients">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.ClientList.AddClient(MarrySocket.MServer.ClientSocket)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.ClientList.RemoveClient(System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.ClientList.GetClient(System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.ClientList.Contains(System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.ClientList.Count">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MServer.ClientSocket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.ClientSocket.#ctor(System.Net.Sockets.Socket,MarrySocket.MExtra.Logging.Logger,MarrySocket.MExtra.Serialization.ISerialization)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.ClientSocket.Close">
            <summary>
            Close the socket connection.
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.ClientSocket.Disconnect">
            <summary>
            Internal socket close handeling.
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.ClientSocket.Error(System.String)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ClientSocket.Id">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ClientSocket.LastPing">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ClientSocket.Ip">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Logging.Log">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Log.#ctor(System.String)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Log.#ctor(System.String,MarrySocket.MExtra.Logging.LogType)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Logging.Log.Id">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="P:MarrySocket.MExtra.Logging.Log.Text">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="P:MarrySocket.MExtra.Logging.Log.LogType">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="P:MarrySocket.MExtra.Logging.Log.DateTime">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="T:MarrySocket.MServer.MarryServer">
            <summary>
            Managed server for handling multiple connection.
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.MarryServer.#ctor(MarrySocket.MServer.ServerConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:MarrySocket.MServer.MarryServer"/> class.
            </summary>
            <param name="serverConfig">Configuration for the server.</param>
        </member>
        <member name="M:MarrySocket.MServer.MarryServer.Start">
            <summary>
            Starts the server.
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.MarryServer.Stop">
            <summary>
            Stops the server.
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.MarryServer.ServerConfig">
            <summary>
            Configuration of the server.
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.MarryServer.Logger">
            <summary>
            Logging of server events.
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.MarryServer.IsListening">
            <summary>
            Server status.
            </summary>
        </member>
        <member name="E:MarrySocket.MServer.MarryServer.ClientConnected">
            <summary>
            Occurs when a new client connected.
            </summary>
        </member>
        <member name="E:MarrySocket.MServer.MarryServer.ReceivedPacket">
            <summary>
            Occurs when a new packet arrived.
            </summary>
        </member>
        <member name="E:MarrySocket.MServer.MarryServer.ClientDisconnected">
            <summary>
            Occurs when a client disconnected.
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Packet.ReadPacket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Packet.ReadPacket.#ctor(MarrySocket.MExtra.Packet.PacketHeader,System.Byte[])">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.ReadPacket.PacketHeader">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.ReadPacket.Type">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MExtra.Packet.ReadPacket.SerializedClass">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MServer.ClientDisconnectedEventArgs">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.ClientDisconnectedEventArgs.#ctor(MarrySocket.MServer.ClientSocket)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ClientDisconnectedEventArgs.ClientSocket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MServer.ClientConnectedEventArgs">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.ClientConnectedEventArgs.#ctor(MarrySocket.MServer.ClientSocket)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ClientConnectedEventArgs.ClientSocket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MServer.ReceivedPacketEventArgs">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.ReceivedPacketEventArgs.#ctor(System.Int32,MarrySocket.MServer.ClientSocket,System.Object)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ReceivedPacketEventArgs.PacketId">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ReceivedPacketEventArgs.ServerSocket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ReceivedPacketEventArgs.MyObject">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MServer.ServerConfig">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.ServerConfig.#ctor(MarrySocket.MExtra.Serialization.ISerialization)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MServer.ServerConfig.#ctor">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ServerConfig.LogUnknownPacket">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ServerConfig.ManagerCount">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ServerConfig.Backlog">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="P:MarrySocket.MServer.ServerConfig.ReadTimeout">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="T:MarrySocket.MExtra.Logging.LogType">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="F:MarrySocket.MExtra.Logging.LogType.NONE">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Logging.LogType.ERROR">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Logging.LogType.INFO">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Logging.LogType.CLIENT">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Logging.LogType.SERVER">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="F:MarrySocket.MExtra.Logging.LogType.PACKET">
            <summary>TODO SUMMARY</summary>
        </member>
        <member name="T:MarrySocket.MExtra.Logging.Logger">
            <summary>
            Logging Class</summary>
            <remarks>
            Logs message combined with id and type as <see cref="T:MarrySocket.MExtra.Logging.Log"/>
            Events for log writings, will only occur if its declared as safe</remarks>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Logger.#ctor">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Logger.Clear">
            <summary>
            Clears all stored <see cref="T:MarrySocket.MExtra.Logging.Log"/></summary>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Logger.Remove(System.Int32)">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Logger.Write(MarrySocket.MExtra.Logging.Log)">
            <summary>
            Writes a new <see cref="T:MarrySocket.MExtra.Logging.Log"/></summary>
            <param name="log"><see cref="T:MarrySocket.MExtra.Logging.Log"/></param>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Logger.Write(System.String,System.Object,MarrySocket.MExtra.Logging.LogType)">
            <summary>
            Writes a new <see cref="T:MarrySocket.MExtra.Logging.Log"/></summary>
            <param name="log">Message {0}</param>
            <param name="arg0">Argument</param>
            <param name="logType">Log Category</param>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Logger.Write(System.String,System.Object,System.Object,MarrySocket.MExtra.Logging.LogType)">
            <summary>
            Writes a new <see cref="T:MarrySocket.MExtra.Logging.Log"/></summary>
            <param name="log">Message {0}</param>
            <param name="arg0">Argument</param>
            <param name="arg1">Argument</param>
            <param name="logType">Log Category</param>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Logger.Write(System.String,MarrySocket.MExtra.Logging.LogType)">
            <summary>
            Writes a new <see cref="T:MarrySocket.MExtra.Logging.Log"/></summary>
            <param name="log">Message</param>
            <param name="logType">Log Category</param>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Logger.Write(System.String)">
            <summary>
            Writes a new <see cref="T:MarrySocket.MExtra.Logging.Log"/></summary>
            <param name="log">Message</param>
        </member>
        <member name="M:MarrySocket.MExtra.Logging.Logger.GetLogs">
            <summary>
            Receive all <see cref="T:MarrySocket.MExtra.Logging.Log"/></summary>
            <returns>
            Dictionary containing id associated by <see cref="T:MarrySocket.MExtra.Logging.Log"/></returns>
        </member>
        <member name="E:MarrySocket.MExtra.Logging.Logger.LogWrite">
            <summary>
            Notifies when a <see cref="T:MarrySocket.MExtra.Logging.Log"/> write occured.
            Don't block this Action by the UI thread, use Dispatcher.BeginInvoke.</summary>
        </member>
        <member name="P:MarrySocket.MExtra.Logging.Logger.Count">
            <summary>
            TODO SUMMARY
            </summary>
        </member>
    </members>
</doc>
